// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// AUTH & USER MANAGEMENT
// ============================================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(STAFF)
  phone         String?
  address       String?
  isActive      Boolean   @default(true)

  // Relations
  accounts        Account[]
  sessions        Session[]
  createdPolicies Policy[]         @relation("CreatedByUser")
  managedPolicies Policy[]         @relation("ManagedByUser")
  activities      PolicyActivity[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ============================================
// SYSTEM CONFIGURATION
// ============================================

model SystemConfig {
  id                 String   @id @default(cuid())
  investigationFee   Float    @default(200)
  defaultTokenExpiry Int      @default(7) // days
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Package {
  id               String  @id @default(cuid())
  name             String
  price            Float
  description      String
  features         String // JSON string
  ctaText          String
  ctaLink          String
  highlight        Boolean
  percentage       Float?
  minAmount        Float?
  shortDescription String?
  isActive         Boolean @default(true)

  policies Policy[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ============================================
// POLICY MANAGEMENT
// ============================================

model Policy {
  id           String @id @default(cuid())
  policyNumber String @unique @default(cuid())

  // Core Policy Information
  propertyAddress     String // Basic address string for quick reference
  propertyType        PropertyType
  propertyDescription String?
  rentAmount          Float
  contractLength      Int          @default(12) // months

  // Guarantor Configuration
  guarantorType GuarantorType

  // Package/Plan
  packageId String?
  package   Package? @relation(fields: [packageId], references: [id])

  // Pricing Configuration
  totalPrice         Float
  tenantPercentage   Float @default(100)
  landlordPercentage Float @default(0)

  // Payment Preferences
  tenantPaymentMethod String? // monthly, biannual, annual, other
  tenantRequiresCFDI  Boolean @default(false)
  tenantCFDIData      String? // JSON with RFC and fiscal data

  // Financial Details (from Landlord)
  hasIVA                    Boolean @default(false)
  issuesTaxReceipts         Boolean @default(false)
  securityDeposit           Float? // Amount in months (default 1)
  maintenanceFee            Float?
  maintenanceIncludedInRent Boolean @default(false)
  rentIncreasePercentage    Float? // For contracts > 1 year
  paymentMethod             String? // bank_transfer, cash, check, etc.

  // User Management
  createdById String
  createdBy   User    @relation("CreatedByUser", fields: [createdById], references: [id])
  managedById String?
  managedBy   User?   @relation("ManagedByUser", fields: [managedById], references: [id])

  // Status & Workflow
  status      PolicyStatus @default(DRAFT)
  currentStep String       @default("initial")

  // Important Dates
  submittedAt DateTime?
  approvedAt  DateTime?
  rejectedAt  DateTime?
  activatedAt DateTime?
  expiresAt   DateTime?

  // Rejection/Approval Details
  reviewNotes     String? @db.Text
  rejectionReason String? @db.Text

  // Related Actors
  landlords     Landlord[]
  tenant        Tenant?
  jointObligors JointObligor[]
  avals         Aval[]

  // Related Data
  propertyDetails PropertyDetails?
  documents       PolicyDocument[]
  activities      PolicyActivity[]
  payments        Payment[]
  investigation   Investigation?
  contracts       Contract[]
  incidents       Incident[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([createdById])
  @@index([managedById])
}

model PropertyDetails {
  id       String @id @default(cuid())
  policyId String @unique
  policy   Policy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  // Enhanced Property Address
  propertyAddressId      String?          @unique
  propertyAddressDetails PropertyAddress? @relation(fields: [propertyAddressId], references: [id])

  // Property Features
  parkingSpaces           Int?
  parkingNumbers          String? // JSON array of parking spot numbers
  isFurnished             Boolean @default(false)
  hasPhone                Boolean @default(false)
  hasElectricity          Boolean @default(true)
  hasWater                Boolean @default(true)
  hasGas                  Boolean @default(false)
  hasCableTV              Boolean @default(false)
  hasInternet             Boolean @default(false)
  otherServices           String? // JSON array of other services
  utilitiesInLandlordName Boolean @default(false)

  // Additional Property Info
  hasInventory            Boolean   @default(false)
  hasRules                Boolean   @default(false)
  petsAllowed             Boolean   @default(false)
  propertyDeliveryDate    DateTime?
  contractSigningDate     DateTime?
  contractSigningLocation String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ============================================
// POLICY ACTORS
// ============================================

model Landlord {
  id       String @id @default(cuid())
  policyId String

  // Type
  isCompany Boolean @default(false)
  isPrimary Boolean @default(false)

  // Personal Information (for individuals)
  fullName String? // Name for individual, company name for company
  rfc      String?
  curp     String?

  // Company Information (for companies)
  companyName      String? // Official company name
  companyRfc       String?
  legalRepName     String? // Legal representative name
  legalRepPosition String? // Legal representative position
  legalRepRfc      String?
  legalRepPhone    String?
  legalRepEmail    String?

  // Contact Information
  email         String
  phone         String
  workPhone     String?
  personalEmail String?
  workEmail     String?

  // Address Information
  address        String // Legacy field
  addressId      String?          @unique
  addressDetails PropertyAddress? @relation("LandlordAddress", fields: [addressId], references: [id])

  // Bank Information (for payments)
  bankName      String?
  accountNumber String?
  clabe         String?
  accountHolder String? // Name of account holder if different

  // Work Information (if individual)
  occupation    String?
  employerName  String?
  monthlyIncome Float?

  // Property Management Details
  propertyDeedNumber    String?
  propertyRegistryFolio String?
  requiresCFDI          Boolean @default(false)
  cfdiData              String? // JSON with fiscal data

  // Access Token for self-service
  accessToken String?   @unique
  tokenExpiry DateTime?

  // Documents
  documents ActorDocument[]

  // Status
  informationComplete Boolean   @default(false)
  completedAt         DateTime?

  // Approval Status
  verificationStatus ActorVerificationStatus @default(PENDING)
  verifiedAt         DateTime?
  verifiedBy         String?
  rejectionReason    String?
  rejectedAt         DateTime?

  policy Policy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  additionalInfo String? @db.Char(1000)

  @@index([policyId])
  @@index([policyId, isPrimary])
}

model Tenant {
  id       String @id @default(cuid())
  policyId String @unique

  // Type
  tenantType TenantType @default(INDIVIDUAL)

  // Individual Information
  fullName    String?
  nationality NationalityType?
  curp        String?
  rfc         String?
  passport    String?

  // Company Information
  companyName      String?
  companyRfc       String?
  legalRepName     String?
  legalRepId       String?
  legalRepPosition String?
  legalRepRfc      String?
  legalRepPhone    String?
  legalRepEmail    String?
  companyAddress   String? // Legacy field

  // Contact Information
  email         String
  phone         String
  workPhone     String?
  personalEmail String?
  workEmail     String?

  // Address Information
  currentAddress String? // Current home address
  addressId      String?          @unique
  addressDetails PropertyAddress? @relation("TenantAddress", fields: [addressId], references: [id])

  // Employment (for individuals)
  employmentStatus       String?
  occupation             String?
  employerName           String?
  employerAddress        String?
  employerAddressId      String?          @unique
  employerAddressDetails PropertyAddress? @relation("TenantEmployerAddress", fields: [employerAddressId], references: [id])
  position               String?
  monthlyIncome          Float?
  incomeSource           String?

  // Rental History
  previousLandlordName         String?
  previousLandlordPhone        String?
  previousLandlordEmail        String?
  previousRentAmount           Float?
  previousRentalAddress        String?
  previousRentalAddressId      String?          @unique
  previousRentalAddressDetails PropertyAddress? @relation("TenantPreviousRentalAddress", fields: [previousRentalAddressId], references: [id])
  rentalHistoryYears           Int?

  // Payment Preferences
  paymentMethod String? // monthly, biannual, annual, other
  requiresCFDI  Boolean @default(false)
  cfdiData      String? // JSON with fiscal data

  // Access Token for self-service
  accessToken String?   @unique
  tokenExpiry DateTime?

  // References
  references           PersonalReference[]
  commercialReferences CommercialReference[] // For companies

  // Documents
  documents ActorDocument[]

  // Status
  informationComplete Boolean   @default(false)
  completedAt         DateTime?

  // Approval Status
  verificationStatus ActorVerificationStatus @default(PENDING)
  verifiedAt         DateTime?
  verifiedBy         String?
  rejectionReason    String?
  rejectedAt         DateTime?

  policy Policy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  additionalInfo String? @db.Char(1000)
}

model JointObligor {
  id       String @id @default(cuid())
  policyId String

  // Type
  isCompany Boolean @default(false)

  // Personal Information (for individuals)
  fullName             String?
  nationality          NationalityType?
  curp                 String?
  rfc                  String?
  passport             String?
  relationshipToTenant String? // Relationship to tenant if any

  // Company Information (for companies)
  companyName      String?
  companyRfc       String?
  legalRepName     String?
  legalRepPosition String?
  legalRepRfc      String?
  legalRepPhone    String?
  legalRepEmail    String?

  // Contact Information
  email         String
  phone         String
  workPhone     String?
  personalEmail String?
  workEmail     String?

  // Address Information
  address        String? // Legacy field
  addressId      String?          @unique
  addressDetails PropertyAddress? @relation("JointObligorAddress", fields: [addressId], references: [id])

  // Employment Information (for individuals)
  employmentStatus       String?
  occupation             String?
  employerName           String?
  employerAddress        String?
  employerAddressId      String?          @unique
  employerAddressDetails PropertyAddress? @relation("JointObligorEmployerAddress", fields: [employerAddressId], references: [id])
  position               String?
  monthlyIncome          Float?
  incomeSource           String?

  // Guarantee Method
  guaranteeMethod      String? // property or income
  hasPropertyGuarantee Boolean @default(false)

  // Property Guarantee Information (for property-based guarantee)
  propertyAddress              String? // Legacy field for guarantee property
  guaranteePropertyAddressId   String?          @unique
  guaranteePropertyDetails     PropertyAddress? @relation("JointObligorPropertyAddress", fields: [guaranteePropertyAddressId], references: [id])
  propertyValue                Float?
  propertyDeedNumber           String?
  propertyRegistry             String?
  propertyTaxAccount           String? // Property tax account number
  propertyUnderLegalProceeding Boolean          @default(false)

  // Financial Information (for income-based guarantee)
  bankName      String?
  accountHolder String?
  hasProperties Boolean @default(false)

  // Marriage Information (for property guarantee)
  maritalStatus String? // single, married_joint, married_separate
  spouseName    String?
  spouseRfc     String?
  spouseCurp    String?

  // Access Token for self-service
  accessToken String?   @unique
  tokenExpiry DateTime?

  // References (3 required)
  references           PersonalReference[]
  commercialReferences CommercialReference[] // For companies

  // Documents
  documents ActorDocument[]

  // Status
  informationComplete Boolean   @default(false)
  completedAt         DateTime?

  // Approval Status
  verificationStatus ActorVerificationStatus @default(PENDING)
  verifiedAt         DateTime?
  verifiedBy         String?
  rejectionReason    String?
  rejectedAt         DateTime?

  policy Policy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  additionalInfo String? @db.Char(1000)
}

model Aval {
  id       String @id @default(cuid())
  policyId String

  // Type
  isCompany Boolean @default(false)

  // Personal Information (for individuals)
  fullName             String?
  nationality          NationalityType?
  curp                 String?
  rfc                  String?
  passport             String?
  relationshipToTenant String?

  // Company Information (for companies)
  companyName      String?
  companyRfc       String?
  legalRepName     String?
  legalRepPosition String?
  legalRepRfc      String?
  legalRepPhone    String?
  legalRepEmail    String?

  // Contact Information
  email         String
  phone         String
  workPhone     String?
  personalEmail String?
  workEmail     String?

  // Address Information
  address        String? // Legacy field
  addressId      String?          @unique
  addressDetails PropertyAddress? @relation("AvalAddress", fields: [addressId], references: [id])

  // Employment Information (for individuals)
  employmentStatus       String?
  occupation             String?
  employerName           String?
  employerAddress        String?
  employerAddressId      String?          @unique
  employerAddressDetails PropertyAddress? @relation("AvalEmployerAddress", fields: [employerAddressId], references: [id])
  position               String?
  monthlyIncome          Float?
  incomeSource           String?

  // Property Guarantee Information
  propertyAddress              String? // Legacy field for guarantee property
  guaranteePropertyAddressId   String?          @unique
  guaranteePropertyDetails     PropertyAddress? @relation("AvalPropertyAddress", fields: [guaranteePropertyAddressId], references: [id])
  propertyValue                Float?
  propertyDeedNumber           String?
  propertyRegistry             String?
  propertyTaxAccount           String? // Property tax account number
  propertyUnderLegalProceeding Boolean          @default(false)

  // Marriage Information (for property guarantee)
  maritalStatus String? // single, married_joint, married_separate
  spouseName    String?
  spouseRfc     String?
  spouseCurp    String?

  // Guarantee Method
  guaranteeMethod      String? // property or income
  hasPropertyGuarantee Boolean @default(true) // Avals typically have property

  // Access Token for self-service
  accessToken String?   @unique
  tokenExpiry DateTime?

  // References (3 required)
  references           PersonalReference[]
  commercialReferences CommercialReference[] // For companies

  // Documents
  documents ActorDocument[]

  // Status
  informationComplete Boolean   @default(false)
  completedAt         DateTime?

  // Approval Status
  verificationStatus ActorVerificationStatus @default(PENDING)
  verifiedAt         DateTime?
  verifiedBy         String?
  rejectionReason    String?
  rejectedAt         DateTime?

  policy Policy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  additionalInfo String? @db.Char(1000)
}

model PersonalReference {
  id String @id @default(cuid())

  name         String
  phone        String
  homePhone    String?
  cellPhone    String?
  email        String?
  relationship String
  occupation   String?
  address      String? // Added based on document requirements

  // Relations (can belong to different actors)
  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  jointObligorId String?
  jointObligor   JointObligor? @relation(fields: [jointObligorId], references: [id], onDelete: Cascade)

  avalId String?
  aval   Aval?   @relation(fields: [avalId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// New model for commercial references (companies)
model CommercialReference {
  id String @id @default(cuid())

  companyName         String
  contactName         String
  phone               String
  email               String?
  relationship        String // supplier, client, partner, etc.
  yearsOfRelationship Int?

  // Relations (can belong to company actors)
  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  jointObligorId String?
  jointObligor   JointObligor? @relation(fields: [jointObligorId], references: [id], onDelete: Cascade)

  avalId String?
  aval   Aval?   @relation(fields: [avalId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// New model for structured addresses
model PropertyAddress {
  id String @id @default(cuid())

  // Street Information
  street         String
  exteriorNumber String
  interiorNumber String?

  // Location Information
  neighborhood String // Colonia
  postalCode   String
  municipality String // Alcaldía/Municipio
  city         String
  state        String
  country      String @default("México")

  // Google Maps Data
  placeId          String? // Google Places ID
  latitude         Float?
  longitude        Float?
  formattedAddress String? // Full formatted address from Google

  // Relations
  propertyDetails      PropertyDetails? // New relation to PropertyDetails
  landlord             Landlord?        @relation("LandlordAddress")
  tenant               Tenant?          @relation("TenantAddress")
  tenantEmployer       Tenant?          @relation("TenantEmployerAddress")
  tenantPreviousRental Tenant?          @relation("TenantPreviousRentalAddress")
  jointObligor         JointObligor?    @relation("JointObligorAddress")
  jointObligorEmployer JointObligor?    @relation("JointObligorEmployerAddress")
  jointObligorProperty JointObligor?    @relation("JointObligorPropertyAddress")
  avalPersonal         Aval?            @relation("AvalAddress")
  avalEmployer         Aval?            @relation("AvalEmployerAddress")
  avalProperty         Aval?            @relation("AvalPropertyAddress")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ============================================
// DOCUMENTS
// ============================================

model ActorDocument {
  id String @id @default(cuid())

  // Document Information
  category     DocumentCategory
  documentType String // INE, passport, income_proof, etc.
  fileName     String
  originalName String
  fileSize     Int
  mimeType     String

  // S3 Storage Information
  s3Key    String  @unique
  s3Bucket String
  s3Region String?

  // Relations (belongs to one actor)
  landlordId String?
  landlord   Landlord? @relation(fields: [landlordId], references: [id], onDelete: Cascade)

  tenantId String?
  tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  jointObligorId String?
  jointObligor   JointObligor? @relation(fields: [jointObligorId], references: [id], onDelete: Cascade)

  avalId String?
  aval   Aval?   @relation(fields: [avalId], references: [id], onDelete: Cascade)

  // Metadata
  uploadedBy      String? // User ID or "self" for actor uploads
  verifiedAt      DateTime?
  verifiedBy      String?
  rejectionReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([s3Key])
}

model PolicyDocument {
  id       String @id @default(cuid())
  policyId String

  // Document Information
  category     String // contract, investigation_report, etc.
  fileName     String
  originalName String
  fileSize     Int
  mimeType     String

  // S3 Storage
  s3Key    String  @unique
  s3Bucket String
  s3Region String?

  // Metadata
  uploadedBy String
  version    Int     @default(1)
  isCurrent  Boolean @default(true)

  policy Policy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ============================================
// POLICY WORKFLOW
// ============================================

model PolicyActivity {
  id       String @id @default(cuid())
  policyId String

  action      String // created, actor_invited, info_completed, approved, etc.
  description String
  details     Json?

  performedById    String?
  performedBy      User?   @relation(fields: [performedById], references: [id])
  performedByActor String? // tenant, landlord, joint_obligor, aval

  ipAddress String?
  userAgent String?

  policy Policy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Investigation {
  id       String @id @default(cuid())
  policyId String @unique

  // Investigation Results
  verdict   InvestigationVerdict?
  riskLevel RiskLevel?
  score     Int?

  // Details
  notes    String? @db.Text
  findings Json? // Structured findings

  // Rejection Details
  rejectedBy      String?
  rejectionReason String?
  rejectedAt      DateTime?

  // Assignment
  assignedToId   String?
  assignedToName String?
  completedBy    String?
  completedAt    DateTime?

  // SLA Tracking
  responseTimeHours Int?

  policy Policy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contract {
  id       String @id @default(cuid())
  policyId String

  version  Int    @default(1)
  fileName String
  fileSize Int
  mimeType String

  // S3 Storage
  s3Key    String  @unique
  s3Bucket String
  s3Region String?

  // Status
  isCurrent Boolean   @default(true)
  signedAt  DateTime?
  signedBy  String? // JSON array of signers

  uploadedBy String

  policy Policy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([policyId, version])
}

// ============================================
// PAYMENTS
// ============================================

model Payment {
  id       String @id @default(cuid())
  policyId String

  amount   Float
  currency String         @default("MXN")
  status   PaymentStatus  @default(PENDING)
  method   PaymentMethod?
  type     PaymentType
  paidBy   PayerType

  // Stripe Fields
  stripeIntentId   String? @unique
  stripeSessionId  String? @unique
  stripeCustomerId String?

  // Manual Payment Fields
  isManual   Boolean @default(false)
  reference  String?
  receiptUrl String?

  // Details
  description  String?
  metadata     Json?
  errorMessage String?

  paidAt       DateTime?
  refundedAt   DateTime?
  refundAmount Float?

  policy Policy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ============================================
// INCIDENTS
// ============================================

model Incident {
  id       String @id @default(cuid())
  policyId String

  // Reporter Information
  reportedBy      ReporterType
  reporterName    String
  reporterContact String

  // Incident Details
  incidentType String
  description  String   @db.Text
  incidentDate DateTime

  // Resolution
  resolution String?        @db.Text
  status     IncidentStatus @default(OPEN)

  // Financial Impact
  requiresPayment   Boolean @default(false)
  paymentAmount     Float?
  isCoveredByPolicy Boolean @default(true)

  // Assignment
  assignedTo String?
  resolvedBy String?
  resolvedAt DateTime?

  policy Policy @relation(fields: [policyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ============================================
// ENUMS
// ============================================

enum UserRole {
  ADMIN
  STAFF
  BROKER
}

enum TenantType {
  INDIVIDUAL
  COMPANY
}

enum GuarantorType {
  NONE
  JOINT_OBLIGOR
  AVAL
  BOTH
}

enum PropertyType {
  HOUSE
  APARTMENT
  COMMERCIAL
  OFFICE
  WAREHOUSE
  OTHER
}

enum NationalityType {
  MEXICAN
  FOREIGN
}

enum PolicyStatus {
  DRAFT
  COLLECTING_INFO
  UNDER_INVESTIGATION
  INVESTIGATION_REJECTED
  PENDING_APPROVAL
  APPROVED
  CONTRACT_PENDING
  CONTRACT_SIGNED
  ACTIVE
  EXPIRED
  CANCELLED
}

enum DocumentCategory {
  IDENTIFICATION
  INCOME_PROOF
  ADDRESS_PROOF
  BANK_STATEMENT
  PROPERTY_DEED
  TAX_RETURN
  EMPLOYMENT_LETTER
  PROPERTY_TAX_STATEMENT // Boleta predial
  MARRIAGE_CERTIFICATE
  COMPANY_CONSTITUTION // Escritura constitutiva
  LEGAL_POWERS // Poderes notariales
  TAX_STATUS_CERTIFICATE // Constancia de situación fiscal
  CREDIT_REPORT // Buró de crédito
  PROPERTY_REGISTRY // Folio real del registro público
  PROPERTY_APPRAISAL // Avalúo de propiedad
  PASSPORT
  IMMIGRATION_DOCUMENT
  UTILITY_BILL
  PAYROLL_RECEIPT // Recibo de nómina
  OTHER
}

enum InvestigationVerdict {
  APPROVED
  REJECTED
  HIGH_RISK
  CONDITIONAL
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  VERY_HIGH
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  PARTIAL
}

enum PaymentMethod {
  CARD
  BANK_TRANSFER
  CASH
  STRIPE
  MANUAL
}

enum PaymentType {
  INVESTIGATION_FEE
  POLICY_PREMIUM
  PARTIAL_PAYMENT
  INCIDENT_PAYMENT
  REFUND
}

enum PayerType {
  TENANT
  LANDLORD
  JOINT_OBLIGOR
  AVAL
  COMPANY
}

enum ReporterType {
  TENANT
  LANDLORD
  JOINT_OBLIGOR
  AVAL
  STAFF
  OTHER
}

enum IncidentStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  ESCALATED
}

enum ActorVerificationStatus {
  PENDING
  APPROVED
  REJECTED
  IN_REVIEW
}
